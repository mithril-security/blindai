syntax = "proto3";
package attestation;

message GetSgxQuoteWithCollateralReply {
    // Raw binary SGX Quote as described in https://download.01.org/intel-sgx/latest/dcap-latest/linux/docs/Intel_SGX_ECDSA_QuoteLibReference_DCAP_API.pdf
    bytes quote = 1;
    SgxCollateral collateral = 2;
    // Enclave certificate in DER format
    bytes enclave_held_data = 3;
}

message SgxCollateral {
    uint32 version = 1;
    // pck_crl_issuer_chain is currently unused by the client
    // Intel sgx_qve_verify_quote function also doesn't use it for anything besides
    // some check on issuing/expiration dates
    string pck_crl_issuer_chain = 2;
    string root_ca_crl = 3;
    string pck_crl = 4;
    string tcb_info_issuer_chain = 5;
    string tcb_info = 6;
    // qe_identity_issuer_chain is unused by the client
    // Intel sgx_qve_verify_quote function uses it
    // but the C++ verification app use the tcbSigningCert (tcb_info_issuer_chain)
    // for both TCB verification and QE identity check
    // This might be because Intel use the same certificate chain for both
    string qe_identity_issuer_chain = 7;
    string qe_identity = 8;
    string pck_certificate = 9;
    string pck_signing_chain = 10;
}

message SgxAttestation{
    // Raw binary SGX Quote as described in https://download.01.org/intel-sgx/latest/dcap-latest/linux/docs/Intel_SGX_ECDSA_QuoteLibReference_DCAP_API.pdf
    bytes quote = 1;
    // Enclave certificate in DER format
    bytes enclave_held_data = 2;
}
