/* Copyright 2022 Mithril Security. All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License. */

syntax = "proto3";
package securedexchange;

import "google/protobuf/timestamp.proto";

service Exchange {
    // Upload a model to the server
    rpc SendModel (stream SendModelRequest) returns (SendModelReply);
    // Run an existing model to the server
    rpc RunModel (stream RunModelRequest) returns (RunModelReply);
}

message ClientInfo {
    string uid = 1;
    string platform_name = 2;
    string platform_arch = 3;
    string platform_version = 4;
    string platform_release = 5;
    string user_agent = 6;
    string user_agent_version = 7;
}

// Payload header
message PayloadHeader {
    // Timestamp at which the server sent the response
    // note: this is using the server's untrusted os clock
    google.protobuf.Timestamp issued_at = 1;
}

// Payload of a response
// This payload is serialized in each rpc's reponse `payload` field), and may be associated
// with a signature
message Payload {
    PayloadHeader header = 1;
    oneof payload {
        SendModelPayload send_model_payload = 2;
        RunModelPayload run_model_payload = 3;
    }
}

/* SendModel */

message SendModelRequest {
    bytes data = 1;
    uint64 length = 2;
    repeated int32 input_fact = 3;
    DatumTypeEnum datum = 4;
    // whether or not the server should sign the reply
    bool sign = 5;
    // this is optional
    ClientInfo client_info = 6;
    // this is optional
    string model_name = 7;
}

enum DatumTypeEnum {
    F32 = 0;
    F64 = 1;
    I32 = 2;
    I64 = 3;
    U32 = 4;
    U64 = 5;
};

message SendModelReply {
    // This is a serialized `Payload` message
    bytes payload = 1;
    // Signature of the payload
    // This field is not present when `sign` is `false` in the request
    bytes signature = 2;
}

message SendModelPayload {
    // Raw SHA-256 hash of the uploaded ONNX model
    // This field is not present when `sign` is `false` in the request
    bytes model_hash = 1;
    // Input fact
    // This field is empty when `sign` is `false` in the request
    repeated int32 input_fact = 2;
}

/* RunModel */

message RunModelRequest {
    bytes input = 1;
    // whether or not the server should sign the reply
    bool sign = 2;
    // this is optional
    ClientInfo client_info = 3;
}

message RunModelReply {
    // This is a serialized `Payload` message
    bytes payload = 1;
    // Signature of the payload
    // This field is not present when `sign` is `false` in the request
    bytes signature = 2;
}

message RunModelPayload {
    repeated float output = 1;
    // Raw SHA-256 hash of the protobuf binary encoding of the repeated float input from RunModelRequest
    // This field is empty when `sign` is `false` in the request
    bytes input_hash = 2;
}
