#!/usr/bin/env python3

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import sys


def find_hex_value_block(content, section):
    index = content.index(section)
    # assume each element in content is ending with '\n'
    hex_bytes = "".join(content[index + 1 : index + 3]).split()
    return "".join(["%02x" % int(x, 16) for x in hex_bytes])


def get_hex_value_to_int(content, section):
    starts = [n for n, l in enumerate(content) if l.startswith(section)]
    key, value = content[starts[0]].split(": ")
    value = int(value.strip(), 16)
    return value


def get_hex_value(content, section):
    starts = [n for n, l in enumerate(content) if l.startswith(section)]
    _, value = content[starts[0]].split(": ")
    value = value.strip()
    return value


mr_signer = "mrsigner->value:\n"
mr_enclave = "metadata->enclave_css.body.enclave_hash.m:\n"
isv_prod_id = "metadata->enclave_css.body.isv_prod_id: "
isv_svn = "metadata->enclave_css.body.isv_svn: "
misc_select = "metadata->enclave_css.body.misc_select: "
misc_mask = "metadata->enclave_css.body.misc_mask: "
attributes_flags = "metadata->enclave_css.body.attributes.flags: "
attributes_xfrm = "metadata->enclave_css.body.attributes.xfrm: "
attributes_mask_flags = "metadata->enclave_css.body.attribute_mask.flags: "
attributes_mask_xfrm = "metadata->enclave_css.body.attribute_mask.xfrm: "

content = sys.stdin.readlines()

# mr_signer_hex = find_hex_value_block(content, mr_signer)
mr_enclave_hex = find_hex_value_block(content, mr_enclave)

misc_select_hex = get_hex_value(content, misc_select)
misc_mask_hex = get_hex_value(content, misc_mask)
attributes_flags_hex = get_hex_value(content, attributes_flags)
attributes_xfrm_hex = get_hex_value(content, attributes_xfrm)
attributes_mask_flags_hex = get_hex_value(content, attributes_mask_flags)
attributes_mask_xfrm_hex = get_hex_value(content, attributes_mask_xfrm)


# isv_prod_id_hex = get_hex_value_to_int(content, isv_prod_id)
# isv_svn_hex = get_hex_value_to_int(content, isv_svn)
#
#

# # This hex string should match the signer of the enclave. This is used to
# # prevents unauthorized enclaves (those from unrecognized ISVs/developers)
# # from using the remote service.
# mr_signer = "{mr_signer_hex}"

# # The product ID for the enclave. This should match the ProdId in the
# # enclave configuration file.
# isv_product_id = {isv_prod_id_hex}

# # The ISV software version number (ISV SVN) must be >= this value. This
# # allows service providers to enforce a minimum enclave version to utilize
# # the remote service. ISV SVN is set in the enclave configuration file.
# min_isv_svn = {isv_svn_hex}


sys.stdout.write(
    f"""\
# Enclave policy file. Determines which enclaves are accept by the
# service provider (after their quote data has been verified)
# WARNING : This file is automatically generated by `scripts/gen_enclave_info_toml.py`
# The MR_ENCLAVE is a measure of the identity of the expected enclave.
# This hex string should match the MR_ENCLAVE of the enclave
mr_enclave = "{mr_enclave_hex}"
misc_select_hex = "{misc_select_hex}"
misc_mask_hex= "{misc_mask_hex}"
attributes_flags_hex= "{attributes_flags_hex}"
attributes_xfrm_hex= "{attributes_xfrm_hex}"
attributes_mask_flags_hex= "{attributes_mask_flags_hex}"
attributes_mask_xfrm_hex= "{attributes_mask_xfrm_hex}"
# Set to true to allow enclaves compiled in DEBUG mode (this sample code uses
# debug mode). Otherwise, set to false to force only production (non-debuggable)
# enclaves. A production service should never allow debug-mode enclaves.
allow_debug = true
"""
)
